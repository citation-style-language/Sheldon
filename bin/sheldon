#!/usr/bin/env ruby

require 'pathname'
require 'octokit'
require 'json'
require 'ostruct'
require 'faraday'
require 'faraday_middleware'
require 'optparse'
require 'erubis'
require 'nokogiri'
require 'cgi'
require 'citeproc'
require 'csl'
require 'csl/styles'
require 'diffy'
require 'git_diff'
require 'base64'
require 'fileutils'

Asset = Struct.new(:path, :source, keyword_init: true)
Style = Struct.new(:path, :baseline, :default_locale, keyword_init: true)

class Template
  ROOT = File.expand_path('../../templates', __FILE__)
  attr_accessor :name

  def self.load(name, ext = '.md.erb')
    new File.read(File.join(ROOT, "#{name}#{ext}")), name
  end

  def initialize(text, name = nil)
    @erb, @name = Erubis::Eruby.new(text), name
  end

  def render(locals = {})
    @erb.result(locals)
  end
end

class GitHubAction
  def initialize
    @token = nil
    @verbose = false
    @action = nil

    actions = %w{welcome apply report failure success}
    begin
      optparse = OptionParser.new do |opts|
        opts.banner = "Usage: sheldon [options]"
        actions.each{|action|
          opts.on("--#{action}") do |v|
            raise OptionParser::InvalidOption.new("Can't do both #{@action} and #{action}") if @action
            @action = action if v
          end
        }
        opts.on('--token TOKEN', 'GitHub token') do |v|
          @token = v
        end
        opts.on('--release DIR', 'update timestamps for released files') do |v|
          raise OptionParser::InvalidOption.new("Can't do both #{@populate ? 'populate' : @action } and release") if @action || @populate
          @release = v
        end
        opts.on('--populate DIR', 'populate and update timestamps for all files') do |v|
          raise OptionParser::InvalidOption.new("Can't do both #{@release ? 'release' : @action } and populate") if @action || @release
          @populate = v
        end
        opts.on('-v', '--[no-]verbose', 'Verbose logging') do |v|
          @verbose = v
        end
      end
      optparse.parse!
      raise OptionParser::MissingArgument.new('token') if @action and not @token
      raise OptionParser::MissingArgument.new((actions + ['release', 'populate']).join('/')) unless [ @action, @release, @populate ].select{|a| a }.length > 0
    rescue OptionParser::InvalidOption, OptionParser::MissingArgument
      puts $!.to_s
      puts optparse
      exit
    end

    @repo = ENV['GITHUB_REPOSITORY'].split('/').last

    case @repo
      when 'styles'
        @ext = '.csl'
      when 'locales'
        @ext = '.xml'
      when 'journals'
        @ext = '.tab'
      else
        raise "Asset extension cannot be established"
    end

    if @populate
      raise "populate can only be performed on a workflow_dispatch" unless ENV['GITHUB_EVENT_NAME'] == 'workflow_dispatch'
      self.populate()
      exit
    end

    @github = Octokit::Client.new(access_token: @token)
    @event = JSON.load(File.read(ENV['GITHUB_EVENT_PATH']))
    @langmap = JSON.load(File.read(File.join(File.dirname(__FILE__), 'langmap.json')))
    @locales = JSON.load(Base64.decode64(@github.contents('citation-style-language/locales', path: 'locales.json', ref: 'master').to_h[:content]))['language-names'].keys.sort

    if @release
      raise "release can only be performed on a push" unless ENV['GITHUB_EVENT_NAME'] == 'push'
      self.release()
      exit
    end

    raise "#{@action} can only be performed on a pull request" unless ENV['GITHUB_EVENT_NAME'] == 'pull_request_target'

    conn = Faraday.new() do |f|
      f.use FaradayMiddleware::FollowRedirects, limit: 5
      f.adapter Faraday.default_adapter
    end
    @patch = conn.get(@event['pull_request']['diff_url']).body

    @diff = []
    GitDiff.from_string(@patch).files.each{|f|
      raise "Unexpected #{@repo} file #{f.b_path} in pull request" if f.b_path != '/dev/null' && !([@ext, '.json', '.yaml'].include?(File.extname(f.b_path)))

      if f.a_path == f.b_path or f.a_path == '/dev/null' # modified or created
        @diff << Asset.new(path: f.b_path, source: f.a_path == '/dev/null' ? nil : f.a_path)
        puts "#{f.a_path == '/dev/null' ? 'Created' : 'Modified'}: #{f.b_path}" if @verbose
      elsif f.b_path == '/dev/null' # deleted
        @diff << Asset.new(source: f.a_path)
        puts "Deleted: #{f.a_path}" if @verbose
      else # renamed
        @diff << Asset.new(path: f.b_path, source: f.a_path)
        puts "Renamed #{f.a_path} => #{f.b_path}" if @verbose
      end
    }

    case @action
      when 'welcome'
        self.welcome()
      when 'apply'
        self.apply()
      when 'report'
        self.report()
      when 'failure'
        self.report(false)
      when 'success'
        self.report(true)
      else
        raise "Unexpected action #{@action}"
    end
  end

  def copy(target, asset, timestamp)
    if File.extname(asset) != @ext
      FileUtils.cp(asset, File.join(target, asset))
      return
    end

    raise "No timestamp for #{asset}" unless timestamp
    puts "updating timestamp on #{File.join(target, asset)} to #{timestamp}" if @verbose

    doc = File.open(asset) { |f| File.read(f) }
    updated = doc.sub(/<updated>[^<]+<\/updated>/, "<updated>#{timestamp}</updated>")
    raise "Failed to patch #{asset} to #{timestamp}" if doc == updated
    File.write(File.join(target, asset), updated)
  end

  def release
    timestamp = @event['commits'].map{|commit| commit['timestamp'] }.max
    ARGV.each{|asset|
      self.copy(@release, asset, timestamp)
    }
  end

  def populate
    timestamp = nil
    cwd = File.expand_path(Pathname.new(Dir.pwd).cleanpath)
    copied = []

    `git log --format=format:"<<%aI>>" --name-only .`.split("\n").each{|asset|
      asset = asset.strip

      if asset == ''
        # pass

      elsif ts = asset.match(/^<<(.+)>>$/)
        timestamp = ts.captures[0]

      elsif File.expand_path(Pathname.new(File.dirname(asset)).cleanpath) != cwd
        # pass

      elsif not File.file?(asset)
        # puts "nonexistant file #{asset} in git log" if @verbose
      
      elsif (File.extname(asset) == @ext || asset == 'publishers.json') && !copied.include?(asset)
        copied << asset
        self.copy(@populate, asset, timestamp)

      end
    }
  end

  def welcome
    raise "Only call me when a new GitHub PR is opened" unless @event['action'] == 'opened'

    template = Template.load(File.join(@repo, 'pull_request_opened'))

    self.feedback(template.render())
  end

  def apply
    # first remove deletes and old renames
    @diff.select{|asset| asset.source && asset.source != asset.path}.uniq{|asset| asset.source}.each{|asset|
      if File.file?(asset.source)
        puts "#{asset.source} deleted" if !asset.path # renames will be reported below
        File.delete(asset.source)
      end
    }
    # then apply mods/news/renames
    @diff.select{|asset| asset.path}.uniq{|asset| asset.path}.each{|asset|
      if asset.path == asset.source
        puts "#{asset.path} modified"
      elsif asset.source
        puts "#{asset.source} renamed to #{asset.path}"
      else
        puts "#{asset.path} added"
      end
      File.open(asset.path, 'w'){|f| f.write(self.get(asset.path, @event['pull_request']['head']['sha'])) }
    }

    #Tempfile.create('patch') do |patch|
    #  File.open(patch.path, 'w'){|f| f.write(@patch) }
    #  if ! system('git', 'apply', patch.path)
    #    #puts '====='
    #    #puts @patch
    #    #puts '====='
    #    exit(false)
    #  end
    #end
  end

  def feedback(msg)
    @github.add_comment(ENV['GITHUB_REPOSITORY'], @event['number'], msg)
  end

  def report(success=nil)
    vars = { 'build_url': "https://github.com/#{ENV['GITHUB_REPOSITORY']}/actions/runs/#{ENV['GITHUB_RUN_ID']}" }
    failures = []

    if File.file?('spec/sheldon/ci.json')
      ci = JSON.load(File.open('spec/sheldon/ci.json'))

      ci['examples'].each{|ex|
        next if ex['status'] == 'passed'

        failures << ''
        failures[-1] += '<b>' + CGI::escapeHTML(ex['full_description'].gsub(/\e\[([;\d]+)?m/, '')) + '</b>'
        failures[-1] += "\n```\n" + ex['exception']['message'].gsub(/\e\[([;\d]+)?m/, '').strip() + "\n```\n"
      }
    end

    @diff.select{|asset| asset.path && asset.path.end_with?('.csl') }.uniq{|asset| asset.path}.each{|asset|
      csl = Nokogiri::XML(self.get(asset.path, @event['pull_request']['head']['sha']))

      dl = csl.xpath('//csl:style', 'csl' => 'http://purl.org/net/xbiblio/csl').attr('default-locale')
      dl = dl.to_s if dl
      dl = 'en-US' if dl.nil? or dl == ''

      title = csl.xpath('//csl:info/csl:title', 'csl' => 'http://purl.org/net/xbiblio/csl').text
      if match = title.match(/[(](.+)[)]$/)
        language = match.captures[0]
      else
        language = nil
      end

      csl = "<b>#{CGI::escapeHTML(File.basename(asset.path))}</b><br>"
      if not @locales.include?(dl)
        failures << "#{csl}Unexpected default-language #{dl.inspect} (must be one of #{@locales.inspect}<br>\n\n"
      elsif dl.start_with?('en-')
        failures << "#{csl}Unexpected language #{language.inspect} in title<br>\n\n" unless language.nil?
      else
        if language.nil?
          failures << "#{csl}default locale #{dl.inspect} needs a parenthesized language in title<br>\n\n"
        elsif @langmap.key?(dl) and @langmap[dl] != language
          failures << "#{csl}Language #{language.inspect} in title; expected #{@langmap[dl].inspect}<br>\n\n"
        end
      end
    }

    success = (failures.length == 0) if success.nil?

    if not success and failures.length == 0
      # this means the rake task failed but all tests, if any, succeeded => rake itself broken, so don't show render results.
      return
    end

    if failures.length > 0
      puts "#{failures.length} failures found" if @verbose
      template = Template.load(File.join(@repo, 'build_failed'))
      vars['build_details'] = "<details><summary>#{failures.length} test#{failures.length == 1 ? '' : 's'} failed</summary>\n\n#{failures.join("\n")}\n\n</details>"
    else
      puts "No failures found" if @verbose 
      template = Template.load(File.join(@repo, 'build_passed'))
      case @repo
        when 'styles'
          vars['build_details'] = styles_passed()
        when 'locales'
          vars['build_details'] = locales_passed()
        else
          raise ValueError("Unexpected repo #{@repo}")
      end
    end

    self.feedback(template.render(vars))
  end

  def locales_passed
    return ''
  end

  def render(items, style, locale)
    locale = File.join(CSL::Locale.root, "locales-#{locale}.xml") if locale
    puts ({ style: (style =~ /^</ ? :baseline : style), locale: locale }).inspect if @verbose

    result = ''
    cp = CiteProc::Processor.new(style: style, locale: locale, format: 'html')
    cp.import(items)

    items.each_slice(2){|citation|
      result += cp.process(citation.map{|i| { 'id' => i['id'] } }) + "<br/>\n"
    }

    bibliography = cp.bibliography
    if bibliography
      result += "<hr/>\n"
      bibliography.each{|line| result += line + "<br/>\n" }
    end

    return result
  end

  def get(path, ref)
    return Base64.decode64(@github.contents(ENV['GITHUB_REPOSITORY'], path: path, ref: ref).to_h[:content])
  end

  def styles_passed
    styles = @diff.select{|asset| asset.path && asset.path.end_with?('.csl') }.uniq{|asset| asset.path }.collect{|asset|
      Style.new(path: asset.path, baseline: asset.source && self.get(asset.source, @event['pull_request']['base']['sha']))
    }
    if styles.empty?
      puts "No styles changed" if @verbose
      return ''
    end
    puts "#{styles.length} styles changed" if @verbose

    comments = ''

    styles.sort!{|a, b|
      da = File.dirname(a.path)
      db = File.dirname(b.path)
      if da.length == db.length
        # they're both dependents, or both independents, sort on name
        a.path <=> b.path
      else
        # if one is dependent and the other is not, prioritize independents at the root level
        da.length <=> db.length
      end
    }
    max = Integer(ENV['SHELDON_CHANGED_SHOW_MAX'] || 10)
    comments = "#{styles.length} styles changed, showing #{max}\n\n" if styles.length > max

    items = JSON.load(File.open('spec/sheldon/items.json'))

    root = ENV['GITHUB_WORKSPACE']
    pull_request = File.join(root, 'pull-request')
    root = pull_request if File.directory?(pull_request)

    styles.each_with_index{|style, i|
      File.open(File.join(root, style.path)) { |f| style.default_locale = default_locale(f) }

      begin
        rendered = render(items, File.join(root, style.path), style.default_locale)
        baseline = style.baseline ? render(items, style.baseline, default_locale(style.baseline)) : nil
      rescue => e
        puts(e.inspect) if @verbose
        rendered = nil
      end

      next if rendered && i >= max

      baseline = nil if rendered.nil?

      comments += '<details>'

      if baseline && rendered == baseline
        status = 'modified style; unchanged output for sample items'
      elsif baseline
        status = 'modified style'
      elsif rendered
        status = 'new'
      else
        status = 'rendering failure'
      end

      comments += "<summary>#{style.path} (#{status})</summary>\n"
      comments += "<blockquote>#{rendered}</blockquote>\n" if rendered

      if baseline && baseline != rendered
        comments += "\n```diff\n"
        comments += Diffy::Diff.new(baseline, rendered).to_s
        comments += "\n```\n"
      end

      comments += '</details>'
    }

    puts comments if @verbose
    return comments
  end

  def failed
  end

  def default_locale(style)
    csl = Nokogiri::XML(style)
    return csl.xpath('//csl:style', 'csl' => 'http://purl.org/net/xbiblio/csl').attr('default-locale')
  end

end

GitHubAction.new
